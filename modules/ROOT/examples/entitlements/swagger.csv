"/api/aggregation/$valuation","GetValuation","[BETA] Perform valuation for a list of portfolios and/or portfolio groups"
"/api/aggregation/$valuationinlined","GetValuationOfWeightedInstruments","[BETA] Perform valuation for an inlined portfolio"
"/api/aggregation/\{scope\}/\{code\}/$generateconfigurationrecipe","GenerateConfigurationRecipe","[EXPERIMENTAL] Generates a recipe sufficient to perform valuations for the given portfolio."
"/api/allocations","ListAllocations","[EXPERIMENTAL] List Allocations"
"/api/allocations","UpsertAllocations","[EXPERIMENTAL] Upsert Allocations"
"/api/allocations/\{scope\}/\{code\}","DeleteAllocation","[EXPERIMENTAL] Delete allocation"
"/api/allocations/\{scope\}/\{code\}","GetAllocation","[EXPERIMENTAL] Get Allocation"
"/api/calendars/businessday/\{scope\}/\{code\}","IsBusinessDateTime","[EXPERIMENTAL] Check whether a DateTime is a ""Business DateTime"""
"/api/calendars/generic","ListCalendars","[EXPERIMENTAL] List Calenders"
"/api/calendars/generic","CreateCalendar","[EXPERIMENTAL] Create a calendar in its generic form"
"/api/calendars/generic/\{scope\}","ListCalendarsInScope","[EXPERIMENTAL] List all calenders in a specified scope"
"/api/calendars/generic/\{scope\}/\{code\}","DeleteCalendar","[EXPERIMENTAL] Delete a calendar"
"/api/calendars/generic/\{scope\}/\{code\}","GetCalendar","[EXPERIMENTAL] Get a calendar in its generic form"
"/api/calendars/generic/\{scope\}/\{code\}","UpdateCalendar","[EXPERIMENTAL] Update a calendar"
"/api/calendars/generic/\{scope\}/\{code\}/dates","GetDates","[EXPERIMENTAL] Get dates for a specific calendar"
"/api/calendars/generic/\{scope\}/\{code\}/dates","AddDateToCalendar","[EXPERIMENTAL] Add a date to a calendar"
"/api/calendars/generic/\{scope\}/\{code\}/dates/\{dateId\}","DeleteDateFromCalendar","[EXPERIMENTAL] Remove a date from a calendar"
"/api/conventions/credit/conventions","ListCdsFlowConventions","[BETA] List the set of CDS Flow Conventions"
"/api/conventions/credit/conventions","UpsertCdsFlowConventions","[BETA] Upsert a set of CDS Flow Conventions. This creates or updates the data in Lusid."
"/api/conventions/credit/conventions/\{scope\}/\{code\}","DeleteCdsFlowConventions","[BETA] Delete the CDS Flow Conventions of given scope and code, assuming that it is present."
"/api/conventions/credit/conventions/\{scope\}/\{code\}","GetCdsFlowConventions","[BETA] Get CDS Flow Conventions"
"/api/conventions/rates/flowconventions","ListFlowConventions","[BETA] List the set of Flow Conventions"
"/api/conventions/rates/flowconventions","UpsertFlowConventions","[BETA] Upsert Flow Conventions. This creates or updates the data in Lusid."
"/api/conventions/rates/flowconventions/\{scope\}/\{code\}","DeleteFlowConventions","[BETA] Delete the Flow Conventions of given scope and code, assuming that it is present."
"/api/conventions/rates/flowconventions/\{scope\}/\{code\}","GetFlowConventions","[BETA] Get Flow Conventions"
"/api/conventions/rates/indexconventions","ListIndexConvention","[BETA] List the set of Index Conventions"
"/api/conventions/rates/indexconventions","UpsertIndexConvention","[BETA] Upsert a set of Index Convention. This creates or updates the data in Lusid."
"/api/conventions/rates/indexconventions/\{scope\}/\{code\}","DeleteIndexConvention","[BETA] Delete the Index Convention of given scope and code, assuming that it is present."
"/api/conventions/rates/indexconventions/\{scope\}/\{code\}","GetIndexConvention","[BETA] Get Index Convention"
"/api/corporateactionsources","ListCorporateActionSources","[BETA] List corporate action sources"
"/api/corporateactionsources","CreateCorporateActionSource","[BETA] Create Corporate Action Source"
"/api/corporateactionsources/\{scope\}/\{code\}","DeleteCorporateActionSource","[BETA] Delete a corporate action source"
"/api/corporateactionsources/\{scope\}/\{code\}/corporateactions","DeleteCorporateActions","[EXPERIMENTAL] Delete one or more corporate actions"
"/api/corporateactionsources/\{scope\}/\{code\}/corporateactions","GetCorporateActions","[BETA] Get corporate actions"
"/api/corporateactionsources/\{scope\}/\{code\}/corporateactions","BatchUpsertCorporateActions","[BETA] Upsert corporate actions"
"/api/counterparties/counterparties/counterparty","ListCounterparties","[EXPERIMENTAL] List the set of Counterparties"
"/api/counterparties/counterparties/counterparty","UpsertCounterparty","[EXPERIMENTAL] Upsert Counterparty. This creates or updates the data in Lusid."
"/api/counterparties/counterparties/counterparty/\{scope\}/\{code\}","DeleteCounterparty","[EXPERIMENTAL] Delete the Counterparty of given scope and code, assuming that it is present."
"/api/counterparties/counterparties/counterparty/\{scope\}/\{code\}","GetCounterparty","[EXPERIMENTAL] Get Counterparty"
"/api/counterparties/counterparties/csa","ListCreditSupportAnnexes","[EXPERIMENTAL] List the set of CSAs"
"/api/counterparties/counterparties/csa","UpsertCreditSupportAnnex","[EXPERIMENTAL] Upsert CSA. This creates or updates the data in Lusid."
"/api/counterparties/counterparties/csa/\{scope\}/\{code\}","DeleteCreditSupportAnnex","[EXPERIMENTAL] Delete the CSA of given scope and code, assuming that it is present."
"/api/counterparties/counterparties/csa/\{scope\}/\{code\}","GetCreditSupportAnnex","[EXPERIMENTAL] Get CSA"
"/api/datatypes","CreateDataType","[BETA] Create data type definition"
"/api/datatypes/\{scope\}","ListDataTypes","[EARLY ACCESS] List data types"
"/api/datatypes/\{scope\}/\{code\}","GetDataType","[EARLY ACCESS] Get data type definition"
"/api/datatypes/\{scope\}/\{code\}","UpdateDataType","[BETA] Update data type definition"
"/api/datatypes/\{scope\}/\{code\}/units","GetUnitsFromDataType","[EARLY ACCESS] Get units from data type"
"/api/derivedtransactionportfolios/\{scope\}","CreateDerivedPortfolio","[EARLY ACCESS] Create derived portfolio"
"/api/derivedtransactionportfolios/\{scope\}/\{code\}/details","DeleteDerivedPortfolioDetails","[EARLY ACCESS] Delete derived portfolio details"
"/api/entities/changes/portfolios","GetPortfolioChanges","[EARLY ACCESS] Get the next change to each portfolio in a scope."
"/api/instruments","ListInstruments","[EARLY ACCESS] List instruments"
"/api/instruments","UpsertInstruments","Upsert instruments"
"/api/instruments/$get","GetInstruments","Get instruments"
"/api/instruments/$upsertproperties","UpsertInstrumentsProperties","Upsert instruments properties"
"/api/instruments/identifierTypes","GetInstrumentIdentifierTypes","[EARLY ACCESS] Get instrument identifier types"
"/api/instruments/\{identifierType\}/\{identifier\}","DeleteInstrument","[EARLY ACCESS] Delete instrument"
"/api/instruments/\{identifierType\}/\{identifier\}","GetInstrument","Get instrument"
"/api/instruments/\{identifierType\}/\{identifier\}","UpdateInstrumentIdentifier","[EARLY ACCESS] Update instrument identifier"
"/api/instruments/\{identifierType\}/\{identifier\}/properties","GetInstrumentProperties","[EXPERIMENTAL] Get instrument properties"
"/api/instruments/\{identifierType\}/\{identifier\}/properties/$delete","DeleteInstrumentProperties","[EXPERIMENTAL] Delete properties from an instrument"
"/api/instruments/\{identifierType\}/\{identifier\}/properties/time-series","GetInstrumentPropertyTimeSeries","[EARLY ACCESS] Get the time series of an instrument property"
"/api/legalentities","UpsertLegalEntity","[EARLY ACCESS] Upsert Legal Entity"
"/api/legalentities/\{idTypeScope\}/\{idTypeCode\}","ListLegalEntities","[EARLY ACCESS] List Legal Entities"
"/api/legalentities/\{idTypeScope\}/\{idTypeCode\}/\{code\}","DeleteLegalEntity","[EARLY ACCESS] Delete Legal Entity"
"/api/legalentities/\{idTypeScope\}/\{idTypeCode\}/\{code\}","GetLegalEntity","[EARLY ACCESS] Get Legal Entity"
"/api/legalentities/\{idTypeScope\}/\{idTypeCode\}/\{code\}/metadata","GetAllLegalEntityAccessMetadata","[EXPERIMENTAL] Get Access Metadata rules for a Legal Entity"
"/api/legalentities/\{idTypeScope\}/\{idTypeCode\}/\{code\}/metadata/\{metadataKey\}","DeleteLegalEntityAccessMetadata","[EXPERIMENTAL] Delete a Legal Entity Access Metadata entry"
"/api/legalentities/\{idTypeScope\}/\{idTypeCode\}/\{code\}/metadata/\{metadataKey\}","GetLegalEntityAccessMetadataByKey","[EXPERIMENTAL] Get an entry identified by a metadataKey in the Access Metadata of a Legal Entity"
"/api/legalentities/\{idTypeScope\}/\{idTypeCode\}/\{code\}/metadata/\{metadataKey\}","UpsertLegalEntityAccessMetadata","[EXPERIMENTAL] Upsert a Legal Entity Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID."
"/api/legalentities/\{idTypeScope\}/\{idTypeCode\}/\{code\}/properties/time-series","GetLegalEntityPropertyTimeSeries","[EXPERIMENTAL] Get Legal Entity Property Time Series"
"/api/legalentities/\{idTypeScope\}/\{idTypeCode\}/\{code\}/relations","GetLegalEntityRelations","[EXPERIMENTAL] Get Relations for Legal Entity"
"/api/legalentities/\{idTypeScope\}/\{idTypeCode\}/\{code\}/relationships","GetLegalEntityRelationships","[EXPERIMENTAL] Get Relationships for Legal Entity"
"/api/login/saml/\{domain\}","GetSamlIdentityProviderId","Get SAML Identity Provider"
"/api/metadata/access/resources","ListAccessControlledResources","[EARLY ACCESS] Get resources available for access control"
"/api/metadata/downloads/exceladdin","GetExcelAddin","[EARLY ACCESS] Download Excel Addin"
"/api/metadata/quotes/rules","GetQuotesAccessMetadataRule","[EXPERIMENTAL] Get a quote access metadata rule"
"/api/metadata/quotes/rules/\{scope\}","DeleteQuoteAcccesMetadataRule","[EXPERIMENTAL] Delete a Quote Access Metadata Rule"
"/api/metadata/quotes/rules/\{scope\}","ListQuotesAccessMetadataRules","[EXPERIMENTAL] List all quote access metadata rules in a scope"
"/api/metadata/quotes/rules/\{scope\}","UpsertQuoteAccessMetadataRule","[EXPERIMENTAL] Upsert a Quote Access Metadata Rule. This creates or updates the data in LUSID."
"/api/metadata/versions","GetLusidVersions","[EARLY ACCESS] Get LUSID versions"
"/api/orders","ListOrders","[EXPERIMENTAL] List Orders"
"/api/orders","UpsertOrders","[EXPERIMENTAL] Upsert Order"
"/api/orders/\{scope\}/\{code\}","DeleteOrder","[EXPERIMENTAL] Delete order"
"/api/orders/\{scope\}/\{code\}","GetOrder","[EXPERIMENTAL] Get Order"
"/api/persons","UpsertPerson","[EXPERIMENTAL] Upsert Person"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}","ListPersons","[EXPERIMENTAL] List Persons"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}","DeletePerson","[EXPERIMENTAL] Delete person"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}","GetPerson","[EXPERIMENTAL] Get Person"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/identifiers","DeletePersonIdentifiers","[EXPERIMENTAL] Delete Person Identifiers"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/identifiers","SetPersonIdentifiers","[EXPERIMENTAL] Set Person Identifiers"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/metadata","GetAllPersonAccessMetadata","[EXPERIMENTAL] Get Access Metadata rules for a Person"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/metadata/\{metadataKey\}","DeletePersonAccessMetadata","[EXPERIMENTAL] Delete a Person Access Metadata entry"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/metadata/\{metadataKey\}","GetPersonAccessMetadataByKey","[EXPERIMENTAL] Get an entry identified by a metadataKey in the Access Metadata of a Person"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/metadata/\{metadataKey\}","UpsertPersonAccessMetadata","[EXPERIMENTAL] Upsert a Person Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID."
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/properties","DeletePersonProperties","[EXPERIMENTAL] Delete Person Properties"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/properties","SetPersonProperties","[EXPERIMENTAL] Set Person Properties"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/properties/time-series","GetPersonPropertyTimeSeries","[EXPERIMENTAL] Get Person Property Time Series"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/relations","GetPersonRelations","[EXPERIMENTAL] Get Relations for Person"
"/api/persons/\{idTypeScope\}/\{idTypeCode\}/\{code\}/relationships","GetPersonRelationships","[EXPERIMENTAL] Get Relationships for Person"
"/api/portfoliogroups/\{scope\}","ListPortfolioGroups","[EARLY ACCESS] List portfolio groups"
"/api/portfoliogroups/\{scope\}","CreatePortfolioGroup","[EARLY ACCESS] Create portfolio group"
"/api/portfoliogroups/\{scope\}/\{code\}","DeletePortfolioGroup","[EARLY ACCESS] Delete portfolio group"
"/api/portfoliogroups/\{scope\}/\{code\}","GetPortfolioGroup","[EARLY ACCESS] Get portfolio group"
"/api/portfoliogroups/\{scope\}/\{code\}","UpdatePortfolioGroup","[EARLY ACCESS] Update portfolio group"
"/api/portfoliogroups/\{scope\}/\{code\}/commands","GetPortfolioGroupCommands","[EARLY ACCESS] Get portfolio group commands"
"/api/portfoliogroups/\{scope\}/\{code\}/expansion","GetPortfolioGroupExpansion","[EARLY ACCESS] Get portfolio group expansion"
"/api/portfoliogroups/\{scope\}/\{code\}/holdings","GetHoldingsForPortfolioGroup","[EARLY ACCESS] Get holdings for transaction portfolios in portfolio group"
"/api/portfoliogroups/\{scope\}/\{code\}/metadata","GetPortfolioGroupMetadata","[EXPERIMENTAL] Get Access Metadata rules for Portfolio Group"
"/api/portfoliogroups/\{scope\}/\{code\}/metadata/\{metadataKey\}","DeleteKeyFromPortfolioGroupAccessMetadata","[EXPERIMENTAL] Delete a Portfolio Group Access Metadata entry"
"/api/portfoliogroups/\{scope\}/\{code\}/metadata/\{metadataKey\}","GetPortfolioGroupAccessMetadataByKey","[EXPERIMENTAL] Get an entry identified by a metadataKey in the Access Metadata of a Portfolio Group"
"/api/portfoliogroups/\{scope\}/\{code\}/metadata/\{metadataKey\}","UpsertPortfolioGroupAccessMetadata","[EXPERIMENTAL] Upsert a Portfolio Group Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID."
"/api/portfoliogroups/\{scope\}/\{code\}/portfolios","AddPortfolioToGroup","[EARLY ACCESS] Add portfolio to group"
"/api/portfoliogroups/\{scope\}/\{code\}/portfolios/\{portfolioScope\}/\{portfolioCode\}","DeletePortfolioFromGroup","[EARLY ACCESS] Delete portfolio from group"
"/api/portfoliogroups/\{scope\}/\{code\}/properties","GetGroupProperties","[EARLY ACCESS] Get group properties"
"/api/portfoliogroups/\{scope\}/\{code\}/properties/$delete","DeleteGroupProperties","[EARLY ACCESS] Delete group properties"
"/api/portfoliogroups/\{scope\}/\{code\}/properties/$upsert","UpsertGroupProperties","[EARLY ACCESS] Upsert group properties"
"/api/portfoliogroups/\{scope\}/\{code\}/properties/time-series","GetPortfolioGroupPropertyTimeSeries","[EXPERIMENTAL] Get the time series of a portfolio group property"
"/api/portfoliogroups/\{scope\}/\{code\}/relations","GetPortfolioGroupRelations","[EXPERIMENTAL] Get Relations for Portfolio Group"
"/api/portfoliogroups/\{scope\}/\{code\}/relationships","GetPortfolioGroupRelationships","[EXPERIMENTAL] Get Relationships for Portfolio Group"
"/api/portfoliogroups/\{scope\}/\{code\}/subgroups","AddSubGroupToGroup","[EARLY ACCESS] Add sub group to group"
"/api/portfoliogroups/\{scope\}/\{code\}/subgroups/\{subgroupScope\}/\{subgroupCode\}","DeleteSubGroupFromGroup","[EARLY ACCESS] Delete sub group from group"
"/api/portfoliogroups/\{scope\}/\{code\}/transactions","GetTransactionsForPortfolioGroup","[EARLY ACCESS] Get transactions for transaction portfolios in a portfolio group"
"/api/portfoliogroups/\{scope\}/\{code\}/transactions/$build","BuildTransactionsForPortfolioGroup","[EARLY ACCESS] Build transactions for transaction portfolios in a portfolio group"
"/api/portfolios","ListPortfolios","List portfolios"
"/api/portfolios/$reconcileInline","ReconcileInline","[BETA] Reconcile valuations performed on one or two sets of inline instruments using one or two configuration recipes."
"/api/portfolios/$reconcileValuation","ReconcileValuation","[BETA] Reconcile valuations performed on one or two sets of holdings using one or two configuration recipes."
"/api/portfolios/$reconcileholdings","ReconcileHoldings","[EARLY ACCESS] Reconcile portfolio holdings"
"/api/portfolios/preview/$reconcileholdings","ReconcileHoldingsPreview","[EXPERIMENTAL] Reconcile portfolio holdings with given tolerance"
"/api/portfolios/\{scope\}","ListPortfoliosForScope","List portfolios for scope"
"/api/portfolios/\{scope\}/\{code\}","DeletePortfolio","Delete portfolio"
"/api/portfolios/\{scope\}/\{code\}","GetPortfolio","Get portfolio"
"/api/portfolios/\{scope\}/\{code\}","UpdatePortfolio","Update portfolio"
"/api/portfolios/\{scope\}/\{code\}/commands","GetPortfolioCommands","[EARLY ACCESS] Get portfolio commands"
"/api/portfolios/\{scope\}/\{code\}/metadata","GetPortfolioMetadata","[EXPERIMENTAL] Get access metadata rules for a portfolio"
"/api/portfolios/\{scope\}/\{code\}/metadata/\{metadataKey\}","DeleteKeyFromPortfolioAccessMetadata","[EXPERIMENTAL] Delete a Portfolio Access Metadata Rule"
"/api/portfolios/\{scope\}/\{code\}/metadata/\{metadataKey\}","GetPortfoliosAccessMetadataByKey","[EXPERIMENTAL] Get an entry identified by a metadataKey in the access metadata object"
"/api/portfolios/\{scope\}/\{code\}/metadata/\{metadataKey\}","UpsertPortfolioAccessMetadata","[EXPERIMENTAL] Upsert a Portfolio Access Metadata Rule associated with specific metadataKey. This creates or updates the data in LUSID."
"/api/portfolios/\{scope\}/\{code\}/properties","DeletePortfolioProperties","Delete portfolio properties"
"/api/portfolios/\{scope\}/\{code\}/properties","GetPortfolioProperties","Get portfolio properties"
"/api/portfolios/\{scope\}/\{code\}/properties","UpsertPortfolioProperties","Upsert portfolio properties"
"/api/portfolios/\{scope\}/\{code\}/properties/time-series","GetPortfolioPropertyTimeSeries","[EXPERIMENTAL] Get portfolio property time series"
"/api/portfolios/\{scope\}/\{code\}/relations","GetPortfolioRelations","[EXPERIMENTAL] Get portfolio relations"
"/api/portfolios/\{scope\}/\{code\}/relationships","GetPortfolioRelationships","[EXPERIMENTAL] Get portfolio relationships"
"/api/portfolios/\{scope\}/\{code\}/returns/\{returnScope\}/\{returnCode\}","GetPortfolioReturns","[EXPERIMENTAL] Get Returns"
"/api/portfolios/\{scope\}/\{code\}/returns/\{returnScope\}/\{returnCode\}","UpsertPortfolioReturns","[EXPERIMENTAL] Upsert Returns"
"/api/portfolios/\{scope\}/\{code\}/returns/\{returnScope\}/\{returnCode\}/aggregated","GetPortfolioAggregateReturns","[EXPERIMENTAL] Aggregate Returns"
"/api/propertydefinitions","GetMultiplePropertyDefinitions","Get multiple property definitions"
"/api/propertydefinitions","CreatePropertyDefinition","Create property definition"
"/api/propertydefinitions/derived","CreateDerivedPropertyDefinition","[EXPERIMENTAL] Create derived property definition"
"/api/propertydefinitions/\{domain\}/\{scope\}/\{code\}","DeletePropertyDefinition","Delete property definition"
"/api/propertydefinitions/\{domain\}/\{scope\}/\{code\}","GetPropertyDefinition","Get property definition"
"/api/propertydefinitions/\{domain\}/\{scope\}/\{code\}","UpdatePropertyDefinition","Update property definition"
"/api/quotes/\{scope\}","ListQuotesForScope","[EARLY ACCESS] List quotes for scope"
"/api/quotes/\{scope\}","UpsertQuotes","[EARLY ACCESS] Upsert quotes"
"/api/quotes/\{scope\}/$delete","DeleteQuotes","[EARLY ACCESS] Delete quotes"
"/api/quotes/\{scope\}/$deprecated","ListQuotes","[DEPRECATED] List quotes"
"/api/quotes/\{scope\}/$get","GetQuotes","[EARLY ACCESS] Get quotes"
"/api/recipes","ListConfigurationRecipes","[EXPERIMENTAL] List the set of Configuration Recipes"
"/api/recipes","UpsertConfigurationRecipe","[EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid."
"/api/recipes/\{scope\}/\{code\}","DeleteConfigurationRecipe","[EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present."
"/api/recipes/\{scope\}/\{code\}","GetConfigurationRecipe","[EXPERIMENTAL] Get Configuration Recipe"
"/api/referenceportfolios/\{scope\}","CreateReferencePortfolio","Create reference portfolio"
"/api/referenceportfolios/\{scope\}/\{code\}/constituents","GetReferencePortfolioConstituents","Get reference portfolio constituents"
"/api/referenceportfolios/\{scope\}/\{code\}/constituents","UpsertReferencePortfolioConstituents","Upsert reference portfolio constituents"
"/api/referenceportfolios/\{scope\}/\{code\}/constituentsadjustments","ListConstituentsAdjustments","List constituents adjustments"
"/api/relationdefinitions","CreateRelationDefinition","[EXPERIMENTAL] Create a relation definition"
"/api/relationdefinitions/\{scope\}/\{code\}","GetRelationDefinition","[EXPERIMENTAL] Get relation definition"
"/api/relations/\{scope\}/\{code\}","CreateRelation","[EXPERIMENTAL] Create Relation"
"/api/relations/\{scope\}/\{code\}/$delete","DeleteRelation","[EXPERIMENTAL] Delete a relation"
"/api/relationshipdefinitions","CreateRelationshipDefinition","[EXPERIMENTAL] Create Relationship Definition"
"/api/relationshipdefinitions/\{scope\}/\{code\}","GetRelationshipDefinition","[EXPERIMENTAL] Get relationship definition"
"/api/relationshipdefinitions/\{scope\}/\{code\}","UpdateRelationshipDefinition","[EXPERIMENTAL] Update Relationship Definition"
"/api/relationshipdefinitions/\{scope\}/\{code\}/relationships","CreateRelationship","[EXPERIMENTAL] Create Relationship"
"/api/relationshipdefinitions/\{scope\}/\{code\}/relationships/$delete","DeleteRelationship","[EXPERIMENTAL] Delete Relationship"
"/api/results/queryable/keys","GetQueryableKeys","[EXPERIMENTAL] Query the set of supported ""addresses"" that can be queried from the aggregation endpoint."
"/api/schemas/entities","ListEntities","[BETA] List entities"
"/api/schemas/entities/\{entity\}","GetEntitySchema","[BETA] Get schema"
"/api/schemas/properties","GetPropertySchema","[BETA] Get property schema"
"/api/schemas/types","GetValueTypes","[BETA] Get value types"
"/api/scopes","ListScopes","[EARLY ACCESS] List Scopes"
"/api/search/instruments","InstrumentsSearch","[EXPERIMENTAL] Instruments search"
"/api/search/portfoliogroups","SearchPortfolioGroups","[EARLY ACCESS] Search Portfolio Groups"
"/api/search/portfolios","SearchPortfolios","[EARLY ACCESS] Search Portfolios"
"/api/search/propertydefinitions","SearchProperties","[EARLY ACCESS] Search Property Definitions"
"/api/structured/\{scope\}","UpsertStructuredMarketData","[EXPERIMENTAL] Upsert a set of structured market data items. This creates or updates the data in Lusid."
"/api/structured/\{scope\}/$delete","DeleteStructuredMarketData","[EXPERIMENTAL] Delete one or more items of structured market data, assuming they are present."
"/api/structured/\{scope\}/$get","GetStructuredMarketData","[EXPERIMENTAL] Get structured market data"
"/api/systemconfiguration/cutlabels","ListCutLabelDefinitions","[EARLY ACCESS] List Existing Cut Labels"
"/api/systemconfiguration/cutlabels","CreateCutLabelDefinition","[EARLY ACCESS] Create a Cut Label"
"/api/systemconfiguration/cutlabels/\{code\}","DeleteCutLabelDefinition","[EARLY ACCESS] Delete a Cut Label"
"/api/systemconfiguration/cutlabels/\{code\}","GetCutLabelDefinition","[EARLY ACCESS] Get a Cut Label"
"/api/systemconfiguration/cutlabels/\{code\}","UpdateCutLabelDefinition","[EARLY ACCESS] Update a Cut Label"
"/api/systemconfiguration/transactions","ListConfigurationTransactionTypes","[EARLY ACCESS] List transaction types"
"/api/systemconfiguration/transactions","SetConfigurationTransactionTypes","[EXPERIMENTAL] Set transaction types"
"/api/systemconfiguration/transactions/side","CreateSideDefinition","[EXPERIMENTAL] Create side definition"
"/api/systemconfiguration/transactions/type","CreateConfigurationTransactionType","[EARLY ACCESS] Create transaction type"
"/api/transactionportfolios/\{scope\}","CreatePortfolio","Create portfolio"
"/api/transactionportfolios/\{scope\}/\{code\}/$resolve","ResolveInstrument","[EARLY ACCESS] Resolve instrument"
"/api/transactionportfolios/\{scope\}/\{code\}/a2b","GetA2BData","[EXPERIMENTAL] Get an A2B report for the given portfolio."
"/api/transactionportfolios/\{scope\}/\{code\}/cashflows","GetPortfolioCashFlows","[EXPERIMENTAL] Get portfolio cash flows"
"/api/transactionportfolios/\{scope\}/\{code\}/cashstatement","GetPortfolioCashStatement","[EARLY ACCESS] Get portfolio cash statement"
"/api/transactionportfolios/\{scope\}/\{code\}/details","GetDetails","Get details"
"/api/transactionportfolios/\{scope\}/\{code\}/details","UpsertPortfolioDetails","Upsert portfolio details"
"/api/transactionportfolios/\{scope\}/\{code\}/executions","CancelExecutions","[EARLY ACCESS] Cancel executions"
"/api/transactionportfolios/\{scope\}/\{code\}/executions","UpsertExecutions","[EARLY ACCESS] Upsert executions"
"/api/transactionportfolios/\{scope\}/\{code\}/holdings","CancelAdjustHoldings","Cancel adjust holdings"
"/api/transactionportfolios/\{scope\}/\{code\}/holdings","GetHoldings","Get holdings"
"/api/transactionportfolios/\{scope\}/\{code\}/holdings","AdjustHoldings","Adjust holdings"
"/api/transactionportfolios/\{scope\}/\{code\}/holdings","SetHoldings","Set holdings"
"/api/transactionportfolios/\{scope\}/\{code\}/holdingsWithOrders","GetHoldingsWithOrders","[EXPERIMENTAL] Get holdings with orders"
"/api/transactionportfolios/\{scope\}/\{code\}/holdingsadjustments","ListHoldingsAdjustments","List holdings adjustments"
"/api/transactionportfolios/\{scope\}/\{code\}/holdingsadjustments/\{effectiveAt\}","GetHoldingsAdjustment","Get holdings adjustment"
"/api/transactionportfolios/\{scope\}/\{code\}/transactions","CancelTransactions","Cancel transactions"
"/api/transactionportfolios/\{scope\}/\{code\}/transactions","GetTransactions","Get transactions"
"/api/transactionportfolios/\{scope\}/\{code\}/transactions","UpsertTransactions","Upsert transactions"
"/api/transactionportfolios/\{scope\}/\{code\}/transactions/$build","BuildTransactions","Build transactions"
"/api/transactionportfolios/\{scope\}/\{code\}/transactions/\{transactionId\}/properties","DeletePropertiesFromTransaction","Delete properties from transaction"
"/api/transactionportfolios/\{scope\}/\{code\}/transactions/\{transactionId\}/properties","UpsertTransactionProperties","Upsert transaction properties"
"/api/transactionportfolios/\{scope\}/\{code\}/upsertablecashflows","GetUpsertablePortfolioCashFlows","[EXPERIMENTAL] Get upsertable portfolio cash flows."
"/api/unitresults/datamap/\{scope\}","CreateDataMap","[EXPERIMENTAL] Upsert a set of structured result address definition maps. This creates or updates the data in Lusid."
"/api/unitresults/datamap/\{scope\}/$get","GetDataMap","[EXPERIMENTAL] Get the result address definition maps from the store"
"/api/unitresults/\{scope\}","UpsertStructuredResultData","[EXPERIMENTAL] Upsert a set of structured result data items. This creates or updates the data in Lusid."
"/api/unitresults/\{scope\}/$delete","DeleteStructuredResultData","[EXPERIMENTAL] Delete one or more items of structured result data, assuming they are present."
"/api/unitresults/\{scope\}/$get","GetStructuredResultData","[EXPERIMENTAL] Get structured result data"
